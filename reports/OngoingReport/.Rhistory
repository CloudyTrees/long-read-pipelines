"VS_ABC012_3_1", "mother",        "female",  "?",
"VS_ABC012_1_1", "proband",       "unknown", "?",
"VS_ABC012_2_1", "father",        "male",    "?"
)
a = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/pb_eap/", intern=TRUE);
buckets = grep("SmallTestData", a[2:length(a)], invert=TRUE, value=TRUE, perl=TRUE) %>% sort()
samples_tbl$run_type = NA
samples_tbl$bucket = NA
for (bucket in buckets) {
for (sample in samples_tbl$sample) {
if (grepl(sample, bucket) || grepl(gsub("NA19", "NA129", sample), bucket)) {
samples_tbl[which(samples_tbl$sample == sample), "bucket"] = bucket
samples_tbl[which(samples_tbl$sample == sample), "run_type"] = ifelse(grepl("_CLR", bucket), "CLR", "CCS")
}
}
}
cromwell_hashes = c(
"dfad1c6c-246d-43dc-af36-17a7d5712a3a",
"16884faf-2359-47d4-817f-03d2e0561540",
"96cf0495-fdd3-46c0-a5c8-91f4cd19eabb",
"3c30905a-a7bc-4b96-bb58-52327d8395bf",
"9f138dee-162c-4eec-8f20-3ba189d393e7",
"2e54ab02-3924-4918-a86c-160d0993e008",
"66c72d9b-ccb1-4aa7-a9fd-374e88274e4f",
"6d49fa15-719b-401b-b4ae-95d6d2c32f0e",
"def40ee2-d5a4-43f2-84b5-599ac04a6bfc",
"f5da6cc2-16ef-481a-9aac-224e7f4d0691",
"2f12f967-6a3d-461b-b26f-3bb9f52c1ec3",
"b9ea6c00-0ecd-433b-83f0-f4fbcecdb901",
"ce3a3344-a09f-4c93-9026-945fae03c93a",
"6c16bf66-975f-4051-a84a-ecee334d407a",
"3433e4b1-a991-467d-8b42-2ae74852a35b",
"e8e48f57-c04a-4dfe-bc10-bbac9b783f47",
"dac336dc-66d5-4790-8879-3d3ce729bc10",
"19f94ab9-4882-4405-bf9f-7a026b333bf7",
"d6d814ff-d06d-447d-a38c-60a0204afa08",
"e13c74a8-8bd4-4ec4-84ae-96cc5e12bf67",
"35ba136d-73c0-49d6-a00d-ee53f1871300",
"ba3e29f9-952f-4e10-9ae6-d2747ca663dc",
"40d481ba-2374-474d-a95b-3b45490e366e"
)
#workflows = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/CorrectAndAlignWorkflow/ gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
workflows = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
for (workflow in workflows) {
cromwell_hash = basename(workflow)
stats = get_workflow_stats(cromwell_hash)
print(paste(cromwell_hash, stats$sample_name))
}
#workflows = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/CorrectAndAlignWorkflow/ gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
workflows = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
for (workflow in workflows) {
cromwell_hash = basename(workflow)
stats = get_workflow_stats(cromwell_hash)
print(paste(cromwell_hash, stats$sample_name))
}
get_workflow_stats <- function(cromwell_hash) {
splitsubreads_stats = get_splitsubreads_stats(cromwell_hash)
ccs_stats = get_ccs_report(cromwell_hash)
rl_file = get_read_lengths_file(cromwell_hash)
bam_uncorrected_file = get_bam_uncorrected_file(cromwell_hash)
bam_corrected_file = get_bam_corrected_file(cromwell_hash)
bam_remaining_file = get_bam_remaining_file(cromwell_hash)
alignment_stats_uncorrected = get_alignment_stats(cromwell_hash, "Uncorrected")
alignment_stats_corrected = get_alignment_stats(cromwell_hash, "Corrected")
alignment_stats_remaining = get_alignment_stats(cromwell_hash, "Remaining")
return(c(list("cromwell_hash" = cromwell_hash),
#workflow_status = get_workflow_execution_status(cromwell_hash),
workflow_status = "unknown",
splitsubreads_stats,
ccs_stats,
file_read_lengths_path = rl_file$file,
file_read_lengths_size = rl_file$size,
file_bam_corrected_file = bam_corrected_file$file,
file_bam_corrected_size = bam_corrected_file$size,
file_bam_uncorrected_file = bam_uncorrected_file$file,
file_bam_uncorrected_size = bam_uncorrected_file$size,
file_bam_remaining_file = bam_remaining_file$file,
file_bam_remaining_size = bam_remaining_file$size
)
)
}
#workflows = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/CorrectAndAlignWorkflow/ gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
workflows = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
for (workflow in workflows) {
cromwell_hash = basename(workflow)
stats = get_workflow_stats(cromwell_hash)
print(paste(cromwell_hash, stats$sample_name))
}
cromwell_hashes = c(
"dfad1c6c-246d-43dc-af36-17a7d5712a3a",
"16884faf-2359-47d4-817f-03d2e0561540",
"96cf0495-fdd3-46c0-a5c8-91f4cd19eabb",
"3c30905a-a7bc-4b96-bb58-52327d8395bf",
"9f138dee-162c-4eec-8f20-3ba189d393e7",
"2e54ab02-3924-4918-a86c-160d0993e008",
"66c72d9b-ccb1-4aa7-a9fd-374e88274e4f",
"6d49fa15-719b-401b-b4ae-95d6d2c32f0e",
"def40ee2-d5a4-43f2-84b5-599ac04a6bfc",
"f5da6cc2-16ef-481a-9aac-224e7f4d0691",
"2f12f967-6a3d-461b-b26f-3bb9f52c1ec3",
"b9ea6c00-0ecd-433b-83f0-f4fbcecdb901",
"ce3a3344-a09f-4c93-9026-945fae03c93a",
"6c16bf66-975f-4051-a84a-ecee334d407a",
"3433e4b1-a991-467d-8b42-2ae74852a35b",
"e8e48f57-c04a-4dfe-bc10-bbac9b783f47",
"dac336dc-66d5-4790-8879-3d3ce729bc10",
"19f94ab9-4882-4405-bf9f-7a026b333bf7",
"d6d814ff-d06d-447d-a38c-60a0204afa08",
"e13c74a8-8bd4-4ec4-84ae-96cc5e12bf67",
"35ba136d-73c0-49d6-a00d-ee53f1871300",
"ba3e29f9-952f-4e10-9ae6-d2747ca663dc",
"40d481ba-2374-474d-a95b-3b45490e366e"
)
all_stats = NULL
for (cromwell_hash in cromwell_hashes) {
stats = as_tibble(get_workflow_stats(cromwell_hash))
if (is.null(all_stats)) {
all_stats = stats
} else {
all_stats = rbind(all_stats, stats)
}
print(paste(cromwell_hash, stats$sample_name, stats$timestamp))
}
all_stats
library(tidyverse)
library(magrittr)
library(ggplot2)
library(curl)
library(rjson)
library(vcfR)
library(foreach)
library(doParallel)
library(knitr)
library(kableExtra)
library(ggpubr)
library(glue)
library(ggridges)
source("cromwell_functions.R")
sample_lab = read_csv("lab.csv")
sample_tbl = tribble(
~sm,             ~relation,        ~sex,      ~family,                   ~pop,       ~biobank,
"NA12891",       "father",         "male",    "CEPH/UTAH PEDIGREE 1463", "CEU",      "NHGRI",
"NA12892",       "mother",         "female",  "CEPH/UTAH PEDIGREE 1463", "CEU",      "NHGRI",
"NA12878rep1",   "proband",        "female",  "CEPH/UTAH PEDIGREE 1463", "CEU",      "NHGRI",
"NA12878rep2",   "proband",        "female",  "CEPH/UTAH PEDIGREE 1463", "CEU",      "NHGRI",
"HG02982",       "father",         "male",    "GB97",                    "GWD",      "NHGRI",
"HG02983",       "mother",         "female",  "GB97",                    "GWD",      "NHGRI",
"HG02984",       "proband",        "male",    "GB97",                    "GWD",      "NHGRI",
"HG00512",       "father",         "male",    "SH032",                   "CHS",      "NHGRI",
"HG00513",       "mother",         "female",  "SH032",                   "CHS",      "NHGRI",
"HG00514",       "proband",        "female",  "SH032",                   "CHS",      "NHGRI",
"NA19239",       "father",         "male",    "Y117",                    "YRI",      "NHGRI",
"NA19238",       "mother",         "female",  "Y117",                    "YRI",      "NHGRI",
"NA19240",       "proband",        "female",  "Y117",                    "YRI",      "NHGRI",
"HG00731",       "father",         "male",    "PR05",                    "PUR",      "NHGRI",
"HG00732",       "mother",         "female",  "PR05",                    "PUR",      "NHGRI",
"HG00733",       "proband",        "female",  "PR05",                    "PUR",      "NHGRI",
"RGP_94_1",      "mother",         "female",  "RGP_94",                  "?",        "RGP SM-GNXIC",
"RGP_94_2",      "father",         "male",    "RGP_94",                  "?",        "RGP SM-GNXID",
"RGP_94_3",      "proband",        "female",  "RGP_94",                  "?",        "RGP SM-GM5IP",
"VS_ABC012_3_1", "mother",         "female",  "VS_ABC012",               "?",        "RGP",
"VS_ABC012_1_1", "proband",        "unknown", "VS_ABC012",               "?",        "RGP",
"VS_ABC012_2_1", "father",         "male",    "VS_ABC012",               "?",        "RGP",
"HCC1954T",      "tumor",          "female",  "HCC1954",                 "SAS",      "ATCC",
"HCC1954N",      "normal",         "female",  "HCC1954",                 "SAS",      "ATCC",
"MIN36192",      ".",              "male",    ".",                       "Filipino", "Talkowski SM-IBA3O",
"MIN39144",      ".",              "male",    ".",                       "Filipino", "Talkowski SM-IBA3L",
"JFG36815F",     ".",              "?",       ".",                       "?",        "Talkowski SM-IIU4J",
"22701",         ".",              "?",       ".",                       "?",        "Talkowski SM-IIU4K",
"GM9197F",       ".",              "?",       ".",                       "?",        "Talkowski SM-IIU4L",
"JFG35878F",     ".",              "?",       ".",                       "?",        "Talkowski SM-IIU4M"
)
sample_status = NULL
for (e in gs_ls("gs://broad-dsde-methods-kiran/pb_eap/**.subreads.bam")) {
if (is.null(sample_status)) {
sample_status = as_tibble(e)
} else {
sample_status = rbind(sample_status, as_tibble(e))
}
}
sample_status = sample_status %>% arrange(timestamp) %>%
filter(!grepl("SmallTestData|Ecoli", file)) %>%
mutate(file = gsub("gs://broad-dsde-methods-kiran/pb_eap/", "", file)) %>%
mutate(file = dirname(file))
sample_status$sm = ""
sample_status$notes = ""
for (i in 1:nrow(sample_status)) {
if (grepl("LowYield", sample_status$file[i])) {
sample_status$sm[i] = gsub("_LowYield", "", sample_status$file[i])
sample_status$notes[i] = "low yield"
}
if (grepl("Rework", sample_status$file[i])) {
sample_status$sm[i] = gsub("_Rework", "", sample_status$file[i])
sample_status$notes[i] = "rework"
}
if (grepl("GWD_|CHS_|PUR_|YRI_", sample_status$file[i])) {
a = unlist(strsplit(sample_status$file[i], "_"))
sample_status$sm[i] = a[2]
}
if (grepl("NA128", sample_status$file[i])) {
sample_status$sm[i] = sample_status$file[i]
}
if (grepl("rep.$", sample_status$file[i])) {
a = unlist(strsplit(sample_status$file[i], "rep"))
sample_status$sm[i] = sample_status$file[i]
sample_status$notes[i] = paste("replicate", a[2])
}
if (grepl("HCC1954T", sample_status$file[i])) {
a = unlist(strsplit(sample_status$file[i], "/"))
sample_status$sm[i] = a[1]
sample_status$notes[i] = a[2]
}
if (grepl("Talkowski", sample_status$file[i])) {
a = unlist(strsplit(sample_status$file[i], "_"))
sample_status$sm[i] = a[2]
}
if (grepl("VS_ABC012_Trio", sample_status$file[i])) {
a = unlist(strsplit(sample_status$file[i], "/"))
sample_status$sm[i] = gsub("_proband|_father|_mother", "", a[2])
}
if (sample_status$sm[i] == "") { sample_status$sm[i] = sample_status$file[i] }
if (sample_status$sm[i] == "RGP_94_2/1_A01") { sample_status$sm[i] = "RGP_94_2"; }
}
all_samples = full_join(sample_tbl, sample_status, by="sm") %>% distinct() %>% arrange(timestamp)
all_samples$date = gsub("2019-", "", unlist(lapply(strsplit(as.character(all_samples$timestamp), " "), function(x) { return(x[1]); })))
all_samples = full_join(all_samples, sample_lab, by="sm")
all_samples
ct_all = tibble()
for (costs_file in list.files("../../results/costs/", pattern="costs.txt", full.names=TRUE)) {
if (file.info(costs_file)$size != 0) {
ct = read_table(costs_file)
ct$cromwell_hash = gsub(".costs.txt", "", basename(costs_file))
ct_all = rbind(ct_all, ct)
}
}
ct_all %<>% mutate(cromwell_hash = as_factor(cromwell_hash))
ct_all %<>% mutate(task_name = as_factor(task_name))
ct_all %<>% mutate(status = as_factor(status))
l = list(
"SplitSubreads"             = ct_all %>% filter(status == "complete", grepl("SplitSubreads", task_name)) %>% pull(total_cost),
"CCS"                       = ct_all %>% filter(status == "complete", grepl("CCS", task_name)) %>% pull(total_cost),
"MergeCCSReports"           = ct_all %>% filter(status == "complete", grepl("MergeCCSReports", task_name)) %>% pull(total_cost),
"RecoverUncorrectedReads"   = ct_all %>% filter(status == "complete", grepl("RecoverUncorrectedReads", task_name)) %>% pull(total_cost),
"ReadLengthsUncorrected"    = ct_all %>% filter(status == "complete", grepl("ReadLengthsUncorrected", task_name)) %>% pull(total_cost),
"ReadLengthsCorrected"      = ct_all %>% filter(status == "complete", grepl("ReadLengthsCorrected", task_name)) %>% pull(total_cost),
"ReadLengthsRemaining"      = ct_all %>% filter(status == "complete", grepl("ReadLengthsRemaining", task_name)) %>% pull(total_cost),
"AlignmentStatsUncorrected" = ct_all %>% filter(status == "complete", grepl("AlignmentStatsUncorrected", task_name)) %>% pull(total_cost),
"AlignmentStatsCorrected"   = ct_all %>% filter(status == "complete", grepl("AlignmentStatsCorrected", task_name)) %>% pull(total_cost),
"AlignmentStatsRemaining"   = ct_all %>% filter(status == "complete", grepl("AlignmentStatsRemaining", task_name)) %>% pull(total_cost),
"Minimap2Uncorrected"       = ct_all %>% filter(status == "complete", grepl("Minimap2Uncorrected", task_name)) %>% pull(total_cost),
"Minimap2Corrected"         = ct_all %>% filter(status == "complete", grepl("Minimap2Corrected", task_name)) %>% pull(total_cost),
"Minimap2Remaining"         = ct_all %>% filter(status == "complete", grepl("Minimap2Remaining", task_name)) %>% pull(total_cost),
"MergeUncorrected"          = ct_all %>% filter(status == "complete", grepl("MergeUncorrected", task_name)) %>% pull(total_cost),
"MergeRemaining"            = ct_all %>% filter(status == "complete", grepl("MergeRemaining", task_name)) %>% pull(total_cost),
"MergeCorrected"            = ct_all %>% filter(status == "complete", grepl("MergeCorrected", task_name)) %>% pull(total_cost),
"SplitIntervalsByChr"       = ct_all %>% filter(status == "complete", grepl("SplitIntervalsByChr", task_name)) %>% pull(total_cost),
"DepthUncorrected"          = ct_all %>% filter(status == "complete", grepl("DepthUncorrected", task_name)) %>% pull(total_cost),
"DepthCorrected"            = ct_all %>% filter(status == "complete", grepl("DepthCorrected", task_name)) %>% pull(total_cost),
"DepthRemaining"            = ct_all %>% filter(status == "complete", grepl("DepthRemaining", task_name)) %>% pull(total_cost),
"PBSV"                      = ct_all %>% filter(status == "complete", grepl("PBSV", task_name)) %>% pull(total_cost),
"Sniffles"                  = ct_all %>% filter(status == "complete", grepl("Sniffles", task_name)) %>% pull(total_cost),
"HaplotypeCaller"           = ct_all %>% filter(status == "complete", grepl("HaplotypeCaller", task_name)) %>% pull(total_cost),
"MergeHaplotypeCallerVCFs"  = ct_all %>% filter(status == "complete", grepl("MergeHaplotypeCallerVCFs", task_name)) %>% pull(total_cost),
" " = c(),
"Total (CLR)"         = ct_all %>% filter(status == "complete", grepl("3433e4b1-a991-467d-8b42-2ae74852a35b", cromwell_hash)) %>% group_by(cromwell_hash) %>% select(total_cost) %>% summarise(total_clr = sum(total_cost)) %>% pull(total_clr),
"Total (CCS)"         = ct_all %>% filter(status == "complete", !grepl("3433e4b1-a991-467d-8b42-2ae74852a35b", cromwell_hash)) %>% group_by(cromwell_hash) %>% select(total_cost) %>% summarise(total_ccs = sum(total_cost)) %>% pull(total_ccs)
)
par(mar=c(13, 5, 3, 1))
b = boxplot(l, frame=FALSE, las=2, ylab="Cost ($)", ylim=c(0, 200))
workflows_old = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/CorrectAndAlignWorkflow/", intern=TRUE)
workflows_new = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
all_workflows = c(workflows_new, workflows_old)
qd = NULL;
for (workflow in all_workflows) {
cromwell_hash = basename(workflow)
md = get_workflow_metadata(cromwell_hash)
if (length(grep("Minimap2Corrected", names(md$calls))) > 0) {
sample_name = ifelse(
grepl("PBSingleSample", workflow),
ifelse("sample_name" %in% names(md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown"),
ifelse("sample_name" %in% names(md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown")
)
date = md$submission
status = md$status
workflow_root = md$workflowRoot
input_bam = ifelse(
grepl("PBSingleSample", workflow),
md$inputs$PBSingleSampleWorkflow.input_bam,
md$inputs$CorrectAndAlignWorkflow.input_bam
)
print(paste(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
if (is.null(qd)) {
qd = c(sample_name, cromwell_hash, date, status, workflow_root, input_bam)
} else {
qd = rbind(qd, c(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
}
}
}
qd = as_tibble(qd, .name_repair = "unique")
names(qd) = c("sample_name", "cromwell_hash", "date", "status", "workflow_root", "input_bam")
qd$date = as.Date(qd$date)
best_workflows = NULL
for (bam in unique(qd$input_bam)) {
best_workflow = qd %>% filter(input_bam == bam, sample_name != "unknown", status != "Aborted") %>% filter(date == max(date))
if (nrow(best_workflow) >= 1) {
if (is.null(best_workflows)) {
best_workflows = best_workflow[1,]
} else {
best_workflows = rbind(best_workflows, best_workflow[1,])
}
}
}
qd
setwd("~/repositories/PBProd/reports/OngoingReport")
workflows_old = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/CorrectAndAlignWorkflow/", intern=TRUE)
workflows_new = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
all_workflows = c(workflows_new, workflows_old)
qd = NULL;
for (workflow in all_workflows) {
cromwell_hash = basename(workflow)
md = get_workflow_metadata(cromwell_hash)
if (length(grep("Minimap2Corrected", names(md$calls))) > 0) {
sample_name = ifelse(
grepl("PBSingleSample", workflow),
ifelse("sample_name" %in% names(md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown"),
ifelse("sample_name" %in% names(md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown")
)
date = md$submission
status = md$status
workflow_root = md$workflowRoot
input_bam = ifelse(
grepl("PBSingleSample", workflow),
md$inputs$PBSingleSampleWorkflow.input_bam,
md$inputs$CorrectAndAlignWorkflow.input_bam
)
print(paste(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
if (is.null(qd)) {
qd = c(sample_name, cromwell_hash, date, status, workflow_root, input_bam)
} else {
qd = rbind(qd, c(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
}
}
}
qd = as_tibble(qd, .name_repair = "unique")
names(qd) = c("sample_name", "cromwell_hash", "date", "status", "workflow_root", "input_bam")
qd$date = as.Date(qd$date)
best_workflows = NULL
for (bam in unique(qd$input_bam)) {
best_workflow = qd %>% filter(input_bam == bam, sample_name != "unknown", status != "Aborted") %>% filter(date == max(date))
if (nrow(best_workflow) >= 1) {
if (is.null(best_workflows)) {
best_workflows = best_workflow[1,]
} else {
best_workflows = rbind(best_workflows, best_workflow[1,])
}
}
}
workflows_old = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/CorrectAndAlignWorkflow/", intern=TRUE)
workflows_new = system("/Users/kiran/google-cloud-sdk/bin/gsutil ls gs://broad-dsde-methods-kiran/workflow_output/PBSingleSampleWorkflow/", intern=TRUE)
all_workflows = c(workflows_new, workflows_old)
qd = NULL;
all_workflows
for (workflow in all_workflows) {
cromwell_hash = basename(workflow)
md = get_workflow_metadata(cromwell_hash)
if (length(grep("Minimap2Corrected", names(md$calls))) > 0) {
sample_name = ifelse(
grepl("PBSingleSample", workflow),
ifelse("sample_name" %in% names(md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown"),
ifelse("sample_name" %in% names(md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown")
)
date = md$submission
status = md$status
workflow_root = md$workflowRoot
input_bam = ifelse(
grepl("PBSingleSample", workflow),
md$inputs$PBSingleSampleWorkflow.input_bam,
md$inputs$CorrectAndAlignWorkflow.input_bam
)
print(paste(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
if (is.null(qd)) {
qd = c(sample_name, cromwell_hash, date, status, workflow_root, input_bam)
} else {
qd = rbind(qd, c(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
}
}
}
for (workflow in all_workflows) {
cromwell_hash = basename(workflow)
md = get_workflow_metadata(cromwell_hash)
if (length(grep("Minimap2Corrected", names(md$calls))) > 0) {
sample_name = ifelse(
grepl("PBSingleSample", workflow),
ifelse("sample_name" %in% names(md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown"),
ifelse("sample_name" %in% names(md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown")
)
date = md$submission
status = md$status
workflow_root = md$workflowRoot
input_bam = ifelse(
grepl("PBSingleSample", workflow),
md$inputs$PBSingleSampleWorkflow.input_bam,
md$inputs$CorrectAndAlignWorkflow.input_bam
)
print(paste(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
if (is.null(qd)) {
qd = c(sample_name, cromwell_hash, date, status, workflow_root, input_bam)
} else {
qd = rbind(qd, c(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
}
}
}
all_workflow
workflow
all_workflows
all_workflows[1]
workflow
cromwell_hash = basename(workflow)
md = get_workflow_metadata(cromwell_hash)
md = get_workflow_metadata(cromwell_hash)
qd = NULL;
for (workflow in all_workflows) {
cromwell_hash = basename(workflow)
md = get_workflow_metadata(cromwell_hash)
if (length(grep("Minimap2Corrected", names(md$calls))) > 0) {
sample_name = ifelse(
grepl("PBSingleSample", workflow),
ifelse("sample_name" %in% names(md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$PBSingleSampleWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown"),
ifelse("sample_name" %in% names(md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs), md$calls$CorrectAndAlignWorkflow.Minimap2Corrected[[1]]$inputs$sample_name, "unknown")
)
date = md$submission
status = md$status
workflow_root = md$workflowRoot
input_bam = ifelse(
grepl("PBSingleSample", workflow),
md$inputs$PBSingleSampleWorkflow.input_bam,
md$inputs$CorrectAndAlignWorkflow.input_bam
)
print(paste(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
if (is.null(qd)) {
qd = c(sample_name, cromwell_hash, date, status, workflow_root, input_bam)
} else {
qd = rbind(qd, c(sample_name, cromwell_hash, date, status, workflow_root, input_bam))
}
}
}
qd = as_tibble(qd, .name_repair = "unique")
names(qd) = c("sample_name", "cromwell_hash", "date", "status", "workflow_root", "input_bam")
qd$date = as.Date(qd$date)
best_workflows = NULL
for (bam in unique(qd$input_bam)) {
best_workflow = qd %>% filter(input_bam == bam, sample_name != "unknown", status != "Aborted") %>% filter(date == max(date))
if (nrow(best_workflow) >= 1) {
if (is.null(best_workflows)) {
best_workflows = best_workflow[1,]
} else {
best_workflows = rbind(best_workflows, best_workflow[1,])
}
}
}
best_workflows
qd
registerDoParallel(8)
some_stats_list = foreach (i=1:nrow(best_workflows)) %dopar% {
stats = as_tibble(get_workflow_stats(best_workflows$cromwell_hash[i]))
print(paste(best_workflows$cromwell_hash[i], stats$sample_name, stats$timestamp))
return(stats)
}
some_stats = NULL
for (i in 1:length(some_stats_list)) {
if (is.null(some_stats)) {
some_stats = some_stats_list[[i]]
} else {
some_stats = rbind(some_stats, some_stats_list[[i]])
}
}
some_stats
some_stats %>% select(file_bam_corrected_file)
some_stats %>% select(sample_name, file_bam_corrected_file)
some_stats %>% select(sample_name, file_bam_corrected_file)
names(some_stats)
some_stats %>% select(sample_name, file_bam_corrected_file) %>% write_csv("bams.csv")
eap_stats
eap_stats %>% View()
library(tidyverse)
library(magrittr)
library(ggplot2)
library(curl)
library(rjson)
library(vcfR)
library(foreach)
library(doParallel)
library(knitr)
library(kableExtra)
library(ggpubr)
library(glue)
library(ggridges)
source("cromwell_functions.R")
eap_stats %>% View()
best_workflows
eap_stats %>% filter(grep("^VS", sample_name))
eap_stats %>% filter(grepl("^VS", sample_name))
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bam_corrected_file)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bam_corrected_file)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bam_corrected_file)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bai_corrected_file)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(sample_name)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bam_remaining_file)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bam_remaining_file)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bam_corrected_file)
eap_stats %>% filter(grepl("^VS", sample_name)) %>% select(file_bam_remaining_file)
setwd("~/analyses/local/PCA1KG/reports/PCA")
